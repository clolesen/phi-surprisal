#### - Preparation - ####
# Import libraries
import sys
import os
import csv
import pickle
import pandas as pd

#Only for writing code
if __name__ == "__main__":
    import os
    os.chdir('..')
    task = 4

#Add the path to and import the actual agency package
sys.path.insert(1, os.getcwd() + '/python_utils/actual_agency')
import actual_agency as agency


#Make function for extracting the information from the MABE produced files
def extract_from_MABE(task=4):
    ## - Settings - ##
    # Parameters used in the MABE simulation
    generations = 60000
    n_agents = int(generations/500.+1)
    n_runs = 50
    n_trials = 128
    n_timeSteps = 35


    ## - Fitness Data - ##
    #Open the dataset generated by MABE containing information for each LOD
    with open('raw_data/LOD_data_task{}.pkl'.format(task),'rb') as f:
        LOD_data = pickle.load(f)

    #Calculate the fitness for each LOD
    for n in range(n_runs):
        LOD_data[n]['fitness'] = (LOD_data[n]['correct_AVE']
                                /(LOD_data[n]['correct_AVE']+LOD_data[n]['incorrect_AVE']))

    #Create empty lists for population
    heading = 'fitness'
    fit_list = []
    run_list = []
    agent_list = []

    #Append fitness and run / agent information to lists
    for n in range(n_runs):
        for x in range(len(LOD_data[n][heading][:])):
            fit_list.append(LOD_data[n][heading][x])
            agent_list.append(x)
            run_list.append(n)

    #Combine into a dataframe
    fitness_data = pd.DataFrame({
        'run': run_list,
        'agent': agent_list,
        'fitness': fit_list
        })

    #Save the dataframe
    fitness_data.to_csv('processed_data/fitness_data_task{}.csv'.format(task), sep=',')


    ## - Timestep Data - ##
    #Open the timestep brain activity data generated by MABE
    with open('raw_data/activity_task{}.pkl'.format(task),'rb') as f:
        activity = pickle.load(f)

    #Reformat the activity to a single list for each trial
    brain_activity = []
    for r in range(n_runs):
        brain_activity.append(agency.getBrainActivity(activity[r], n_agents, n_trials, world_height=34))

    # This file is where we write the data to
    out_file = open(
        'processed_data/timestep_data_task{}.csv'.format(task), "w", newline='')
    out_writer = csv.writer(out_file)

    # Write the column names
    colnames = ['run', 'agent', 'trial', 'timestep',
                'S1', 'S2', 'M1', 'M2', 'H1', 'H2', 'H3', 'H4']
    out_writer.writerow(colnames)

    # Go through each run
    for run in range(n_runs):

        # Go through each generation's best agent
        for agent in range(n_agents):

            # Go through each trial
            for trial in range(n_trials):

                # Go through each timestep
                # The first timestep is where all nodes are 0 is removed
                # The last timestep which signals end fo trial is removed
                for timestep in range(1, n_timeSteps-1):

                    # Extract states of the system's 8 nodes
                    state = brain_activity[run][agent][trial][timestep].astype(
                        int)

                    # Make list of information to save
                    line = [run, agent, trial, timestep, state[0], state[1],
                            state[2], state[3], state[4], state[5], state[6], state[7]]

                    # And write it to the csv
                    out_writer.writerow(line)
